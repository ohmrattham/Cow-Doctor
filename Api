CHANNEL_API_KEY ="BbrDFMNe8lpGWTyVSX/NuMX4qeAUUyAbm68nXcWycnDcxy1wQVgn2Xikf1umD5OoHuGClyOHdHdtjgOpMoAy8UbKAqDYHgWG6B68EuI9IH0HJ2dStmdNBKBvPlIAi1XLR1il9bwShRi/e1uec5hJbQdB04t89/1O/w1cDnyilFU="
GEMINI_API_KEY = "AIzaSyCGE6OE51SXA44dlCU5yZhNNFaFzGt1rMg"


**************************************************************************************************************************************************************************************************************************

// Line Cow Disease Bot with Gemini + TeachableMachine
require("dotenv").config();
const express = require("express");
const axios = require("axios");
const fs = require("fs");
const tf = require("@tensorflow/tfjs");
const multer = require("multer");
const { createCanvas, loadImage } = require("canvas");

const app = express();
app.use(express.json());
const upload = multer({ dest: "uploads/" });
const CHANNEL_ACCESS_TOKEN = process.env.CHANNEL_API_KEY;
let model;

const userMemory = {}; // userId -> array of { role: "user" | "bot", text: string }
const lastImages = {}; // userId -> last image file path (for follow-up)

const classNames = [
  "โรคไข้3วัน",
  "โรคปากเท้าเปื่อย",
  "โรคBlackLeg",
  "โรคคอบวม",
  "โรคแอนแทรกซ์",
  "โรคลัมปีสกิน"
];

// ล้างความจำของผู้ใช้ทั้งหมดทุก 5 นาที พร้อมลบไฟล์ภาพ
setInterval(() => {
  for (const userId in userMemory) {
    userMemory[userId] = [];
  }
  for (const userId in lastImages) {
    const filePath = lastImages[userId];
    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath);
    }
    delete lastImages[userId];
  }
  console.log("🧹 ล้างประวัติการสนทนาและลบภาพของผู้ใช้แล้ว");
}, 5 * 60 * 1000); // 5 นาที

// โหลดโมเดลวิเคราะห์ภาพจาก Teachable Machine
const loadModel = async () => {
  model = await tf.loadLayersModel(
    "https://teachablemachine.withgoogle.com/models/I_d2z8vuR/model.json"
  );
  console.log("✅ Model loaded");
};
loadModel();

// เช็คว่า webhook ทำงานอยู่
app.get("/webhook", (req, res) => {
  res.send("✅ Webhook is running");
});

// รับ POST จาก LINE
app.post("/webhook", async (req, res) => {
  const events = req.body.events;
  if (!events || !Array.isArray(events)) return res.sendStatus(200);

  for (const event of events) {
    const userId = event.source.userId;
    const replyToken = event.replyToken;
    const message = event.message;

    if (!userMemory[userId]) userMemory[userId] = [];

    if (message?.type === "image") {
      await reply(replyToken, "กำลังประมวลผลภาพ กรุณารอสักครู่...");
      try {
        const messageId = message.id;
        const imgRes = await axios.get(
          `https://api-data.line.me/v2/bot/message/${messageId}/content`,
          {
            responseType: "arraybuffer",
            headers: { Authorization: `Bearer ${CHANNEL_ACCESS_TOKEN}` },
          }
        );

        const filePath = `uploads/${messageId}.jpg`;
        fs.writeFileSync(filePath, Buffer.from(imgRes.data));
        lastImages[userId] = filePath;

        const img = await loadImage(filePath);
        const canvas = createCanvas(224, 224);
        const ctx = canvas.getContext("2d");
        ctx.drawImage(img, 0, 0, 224, 224);
        const tensor = tf.browser.fromPixels(canvas).toFloat().div(255).expandDims(0);
        const prediction = model.predict(tensor);
        const result = await prediction.array();
        const scores = result[0];
        const maxScore = Math.max(...scores);
        const maxIndex = scores.indexOf(maxScore);

        const threshold = 0.7;
        if (maxScore >= threshold) {
          const disease = classNames[maxIndex];
          const prompt = `ขอข้อมูลเกี่ยวกับโรค ${disease} ในวัว โดยสรุปเป็นหัวข้อพร้อมอีโมจิแต่ไม่อธิบายอีโมจิ`;
          const replyText = await askGemini(prompt);
          userMemory[userId].push({ role: "bot", text: replyText });
          if (userMemory[userId].length > 10) userMemory[userId].shift();
          await push(userId, `✅ ตรวจพบว่าอาจเป็น: ${disease}\n\n📖 ${replyText}`);
        } else {
          await push(userId, "รูปภาพนี้ไม่สามารถวินิจฉัยโรคได้หรือสายพันธุ์ขอวัวได้\nกรุณาพิมพ์อาการเพิ่มเติมหรือข้อมูลเพิ่มเติมเกี่ยวกับรูปนี้เพื่อให้ AI วิเคราะห์อีกครั้ง");
        }
      } catch (err) {
        console.error("❌ Image processing error:", err);
        await push(userId, "เกิดข้อผิดพลาดในการประมวลผลภาพ");
      }
    } else if (message?.type === "text") {
      userMemory[userId].push({ role: "user", text: message.text });
      if (userMemory[userId].length > 10) userMemory[userId].shift();

      if (lastImages[userId]) {
        const filePath = lastImages[userId];
        const prompt = `ภาพด้านล่างเกี่ยวข้องกับข้อความนี้หรือไม่: ${message.text}\nช่วยวิเคราะห์ร่วมกันและให้ข้อมูลเกี่ยวกับโรคหรือพฤติกรรมทางธรรมชาติที่อาจเป็น`;
        const replyText = await askGeminiWithImage(filePath, prompt);
        delete lastImages[userId];
        if (fs.existsSync(filePath)) {
          fs.unlinkSync(filePath);
        }
        userMemory[userId].push({ role: "bot", text: replyText });
        await reply(replyToken, replyText);
      } else {
        const dialog = userMemory[userId]
          .slice(-10)
          .map((entry) => `${entry.role === "user" ? "ผู้ใช้" : "AI"}: ${entry.text}`)
          .join("\n");

        const fullPrompt = `ต่อไปนี้คือบทสนทนาระหว่างผู้ใช้กับ AIผุ้หญิงที่เชี่ยวชาญเรื่องวัว โดยจะตอบคำถามเกี่ยวกับวัวเท่านั้น หากผู้ใช้ถามไม่เกี่ยวกับวัว จะตอบว่า ขอโทษค่ะ CO&OX จะตอบคำถามเกี่ยววัวเท่านั้น:\n${dialog}\nAI:`;
        const replyText = await askGemini(fullPrompt);
        userMemory[userId].push({ role: "bot", text: replyText });
        if (userMemory[userId].length > 10) userMemory[userId].shift();
        await reply(replyToken, replyText);
      }
    }
  }

  res.sendStatus(200);
});

// ========== Gemini Functions ==========
async function askGemini(prompt) {
  const res = await axios.post(
    "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
    {
      contents: [{ parts: [{ text: prompt }] }],
    },
    {
      headers: { "Content-Type": "application/json" },
      params: { key: process.env.GEMINI_API_KEY },
    }
  );
  return res.data.candidates?.[0]?.content?.parts?.[0]?.text || "❌ ไม่สามารถตอบได้";
}

async function askGeminiWithImage(imagePath, promptText) {
  const base64Image = fs.readFileSync(imagePath, { encoding: "base64" });
  const res = await axios.post(
    "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
    {
      contents: [
        {
          parts: [
            {
              inlineData: {
                mimeType: "image/jpeg",
                data: base64Image,
              },
            },
            { text: promptText },
          ],
        },
      ],
    },
    {
      headers: { "Content-Type": "application/json" },
      params: { key: process.env.GEMINI_API_KEY },
    }
  );
  return res.data.candidates?.[0]?.content?.parts?.[0]?.text || "❌ ไม่สามารถวิเคราะห์ได้";
}

// ========== LINE Message Functions ==========
async function reply(token, text) {
  await axios.post(
    "https://api.line.me/v2/bot/message/reply",
    {
      replyToken: token,
      messages: [{ type: "text", text }],
    },
    {
      headers: {
        Authorization: `Bearer ${CHANNEL_ACCESS_TOKEN}`,
        "Content-Type": "application/json",
      },
    }
  );
}

async function push(userId, text) {
  await axios.post(
    "https://api.line.me/v2/bot/message/push",
    {
      to: userId,
      messages: [{ type: "text", text }],
    },
    {
      headers: {
        Authorization: `Bearer ${CHANNEL_ACCESS_TOKEN}`,
        "Content-Type": "application/json",
      },
    }
  );
}

app.listen(3001, () => {
  console.log("🚀 Server running on http://localhost:3001");
});
